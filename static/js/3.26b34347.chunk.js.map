{"version":3,"sources":["utils.ts","components/EncoderConfigDetails.tsx","components/HelpAndAbout.tsx","App.tsx","main.tsx"],"names":["EncoderStatus","EncoderConfigDetails","configStr","styledStr","JSON","stringify","parse","style","whiteSpace","HelpAndAbout","href","tableLayout","borderCollapse","conf","EncoderConfig","setDim","setRdoLookaheadFrame","toJSON","enc","Encoder","f","newFrame","App","useState","Initialized","encoderStatus","setEncoderStatus","flushing","setFlushing","frameQ_length","setFrameQ_length","Array","packets","setPackets","disabled","onClick","sendFrame","Received","length","flush","Flushed","receivePacket","p","Encoded","newPackets","from","push","e","NeedMoreData","LimitReached","console","error","start","map","key","display","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oJASYA,E,wCCgBGC,EAVmD,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAC3DC,EAAYC,KAAKC,UAAUD,KAAKE,MAAMJ,GAAY,KAAM,GAC9D,OACI,iCACI,mDACA,uBAAGK,MAAO,CAAEC,WAAY,aAAeL,KC4BpCM,G,MApCgB,kBAC3B,iCACI,mDAEA,qCACA,uDAA4B,uBAAGC,KAAK,iCAAR,SAA5B,+BACA,0MAA+K,uBAAGA,KAAK,2BAAR,eAA/K,KAEA,uCACA,2BAAOH,MAAO,CAAEI,YAAa,QAASC,eAAgB,aAClD,+BACI,4BACI,4BAAI,yCACJ,4BAAI,kDACJ,4BAAI,6CAER,4BACI,0CACA,wEACA,8BAEJ,4BACI,qCACA,6DACA,mEAEJ,4BACI,8CACA,sDACA,mE,iBFhCRZ,K,wBAAAA,E,kBAAAA,E,uCAAAA,E,6BAAAA,E,sEAAAA,E,2BAAAA,M,KGOZ,IAAMa,GAAO,IAAIC,KACfC,OAAO,GAAI,IACXC,qBAAqB,GAGjBd,EAAYW,EAAKI,SAGjBC,EAAM,IAAIC,IAAQN,GAGlBO,EAAIF,EAAIG,WAEC,SAASC,IAAO,IAAD,EACaC,mBAASvB,EAAcwB,aADpC,mBACtBC,EADsB,KACPC,EADO,OAEGH,oBAAS,GAFZ,mBAEtBI,EAFsB,KAEZC,EAFY,OAGaL,mBAAS,GAHtB,mBAGtBM,EAHsB,KAGPC,EAHO,OAICP,mBAASQ,SAJV,mBAItBC,EAJsB,KAIbC,EAJa,KA8C7B,OACC,6BACC,6CAEA,4BAAQC,SAAUP,EAAUQ,QA5CZ,WACjBjB,EAAIkB,UAAUhB,GACdU,EAAiBD,EAAgB,GACjCH,EAAiB1B,EAAcqC,YAyC9B,cACA,4BAAQH,SAAUP,GAAYK,EAAQM,SAAWT,EAAeM,QAvCpD,WACbjB,EAAIqB,QACJX,GAAY,GACZF,EAAiB1B,EAAcwC,WAoC9B,SACA,4BAAQN,SAAUF,EAAQM,SAAWT,EAAeM,QAlChC,SAAhBM,IACL,IACC,IAAMC,EAAIxB,EAAIuB,gBACdf,EAAiB1B,EAAc2C,SAG/B,IAAMC,EAAab,MAAMc,KAAKb,GAC9BY,EAAWE,KAAKJ,GAChBT,EAAWW,GAGPjB,GAAaE,EAAgBe,EAAWN,SAAY,GACvDG,IAEA,MAAOM,GACE,YAANA,EACHN,IACgB,mBAANM,EACVrB,EAAiB1B,EAAcgD,cACf,kBAAND,EACVrB,EAAiB1B,EAAciD,eAE/BvB,EAAiBqB,GACjBG,QAAQC,MAAMJ,OAWf,kBAEA,+CAAqBlB,EAAgBG,EAAQM,QAC7C,8CAAoBb,GAEpB,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAsBvB,UAAWA,IAEb,IAAnB8B,EAAQM,OAAe,+CAA2B,8BACnD,wBAAIc,MAAO,GAAKpB,EAAQqB,KAAI,SAACX,GAAD,OAAO,wBAAIY,IAAKZ,EAAEa,WAAYb,EAAEa,gBC7E/DC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACpC,EAAD,OAEFqC,SAASC,eAAe","file":"static/js/3.26b34347.chunk.js","sourcesContent":["// Copyright (c) 2020, The rav1e contributors. All rights reserved\n//\n// This source code is subject to the terms of the BSD 2 Clause License and\n// the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License\n// was not distributed with this source code in the LICENSE file, you can\n// obtain it at www.aomedia.org/license/software. If the Alliance for Open\n// Media Patent License 1.0 was not distributed with this source code in the\n// PATENTS file, you can obtain it at www.aomedia.org/license/patent.\n\nexport enum EncoderStatus {\n\tEncoded = \"Encoded frame\",\n\tFlushed = \"Flushed\",\n\tInitialized = \"Initialized successfully\",\n\tLimitReached = \"Limit reached\",\n\tNeedMoreData = \"Need more data (send more frames or flush the encoder)\",\n\tReceived = \"Received frame\"\n}","// Copyright (c) 2020, The rav1e contributors. All rights reserved\n//\n// This source code is subject to the terms of the BSD 2 Clause License and\n// the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License\n// was not distributed with this source code in the LICENSE file, you can\n// obtain it at www.aomedia.org/license/software. If the Alliance for Open\n// Media Patent License 1.0 was not distributed with this source code in the\n// PATENTS file, you can obtain it at www.aomedia.org/license/patent.\n\nimport React from 'react';\n\ninterface EncoderConfigDetailsProps {\n    configStr: string\n}\n\nconst EncoderConfigDetails: React.FC<EncoderConfigDetailsProps> = ({ configStr }) => {\n    const styledStr = JSON.stringify(JSON.parse(configStr), null, 4);\n    return (\n        <details>\n            <summary>Encoder Config</summary>\n            <p style={{ whiteSpace: \"pre-wrap\" }}>{styledStr}</p>\n        </details>\n    )\n};\n\nexport default EncoderConfigDetails;","// Copyright (c) 2020, The rav1e contributors. All rights reserved\n//\n// This source code is subject to the terms of the BSD 2 Clause License and\n// the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License\n// was not distributed with this source code in the LICENSE file, you can\n// obtain it at www.aomedia.org/license/software. If the Alliance for Open\n// Media Patent License 1.0 was not distributed with this source code in the\n// PATENTS file, you can obtain it at www.aomedia.org/license/patent.\n\nimport React from 'react';\nimport \"./style.css\";\n\nconst HelpAndAbout: React.FC = () => (\n    <details>\n        <summary>About and Help</summary>\n\n        <h3>About</h3>\n        <p>Thank you for trying the <a href=\"https://github.com/xiph/rav1e\">rav1e</a>-encode-in-browser demo ^.^</p>\n        <p>You are able to send frames to the encoder, encode them and view a list of the emitted Packets. And the best thing? Everything is running locally in your browser thanks to <a href=\"https://webassembly.org\">webassembly</a>!</p>\n\n        <h3>Buttons</h3>\n        <table style={{ tableLayout: \"fixed\", borderCollapse: \"collapse\" }}>\n            <tbody>\n                <tr>\n                    <td><strong>Name</strong></td>\n                    <td><strong>Functionality</strong></td>\n                    <td><strong>Details</strong></td>\n                </tr>\n                <tr>\n                    <td>Send Frame</td>\n                    <td>Send a new (blank) frame to the encoder.</td>\n                    <td></td>\n                </tr>\n                <tr>\n                    <td>Flush</td>\n                    <td>Signals the End of the Video.</td>\n                    <td>Disables option to send new frames</td>\n                </tr>\n                <tr>\n                    <td>Receive Packet</td>\n                    <td>Encode the next frame.</td>\n                    <td>Needs ~11 Frames in the queue</td>\n                </tr>\n            </tbody>\n        </table>\n    </details>\n)\n\nexport default HelpAndAbout;","// Copyright (c) 2020, The rav1e contributors. All rights reserved\n//\n// This source code is subject to the terms of the BSD 2 Clause License and\n// the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License\n// was not distributed with this source code in the LICENSE file, you can\n// obtain it at www.aomedia.org/license/software. If the Alliance for Open\n// Media Patent License 1.0 was not distributed with this source code in the\n// PATENTS file, you can obtain it at www.aomedia.org/license/patent.\n\nimport React, { useState } from 'react';\n\nimport { EncoderConfigDetails, HelpAndAbout } from \"./components\";\nimport { Encoder, EncoderConfig, Packet } from \"rav1e\";\nimport { EncoderStatus } from \"./utils\";\n\n// Configuration for encoder\nconst conf = new EncoderConfig()\n\t.setDim(64, 96)\n\t.setRdoLookaheadFrame(1);\n\n// JSON-string representing configuration\nconst configStr = conf.toJSON();\n\n// Encoder\nconst enc = new Encoder(conf);\n\n// Frame to send to encoder\nconst f = enc.newFrame();\n\nexport default function App() {\n\tconst [encoderStatus, setEncoderStatus] = useState(EncoderStatus.Initialized);\n\tconst [flushing, setFlushing] = useState(false);\n\tconst [frameQ_length, setFrameQ_length] = useState(0);\n\tconst [packets, setPackets] = useState(Array<Packet>())\n\n\tconst sendFrame = () => {\n\t\tenc.sendFrame(f);\n\t\tsetFrameQ_length(frameQ_length + 1);\n\t\tsetEncoderStatus(EncoderStatus.Received)\n\t};\n\n\tconst flush = () => {\n\t\tenc.flush();\n\t\tsetFlushing(true);\n\t\tsetEncoderStatus(EncoderStatus.Flushed);\n\t}\n\n\tconst receivePacket = () => {\n\t\ttry {\n\t\t\tconst p = enc.receivePacket();\n\t\t\tsetEncoderStatus(EncoderStatus.Encoded);\n\n\t\t\t// append new packet\n\t\t\tconst newPackets = Array.from(packets);\n\t\t\tnewPackets.push(p);\n\t\t\tsetPackets(newPackets);\n\n\t\t\t// needed to receive the \"limit reached\" status\n\t\t\tif (flushing && (frameQ_length - newPackets.length) === 0) {\n\t\t\t\treceivePacket();\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tif (e === \"encoded\") {\n\t\t\t\treceivePacket();\n\t\t\t} else if (e === \"need more data\") {\n\t\t\t\tsetEncoderStatus(EncoderStatus.NeedMoreData);\n\t\t\t} else if (e === \"limit reached\") {\n\t\t\t\tsetEncoderStatus(EncoderStatus.LimitReached);\n\t\t\t} else {\n\t\t\t\tsetEncoderStatus(e);\n\t\t\t\tconsole.error(e);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<h1>Rav1e_js demo</h1>\n\n\t\t\t<button disabled={flushing} onClick={sendFrame}>Send Frame</button>\n\t\t\t<button disabled={flushing || packets.length === frameQ_length} onClick={flush}>Flush</button>\n\t\t\t<button disabled={packets.length === frameQ_length} onClick={receivePacket}>Receive Packet</button>\n\n\t\t\t<p>Frames in queue: {frameQ_length - packets.length}</p>\n\t\t\t<p>Encoder Status: {encoderStatus}</p>\n\n\t\t\t<HelpAndAbout />\n\t\t\t<EncoderConfigDetails configStr={configStr} />\n\n\t\t\t{packets.length !== 0 ? <h3>Encoded packets</h3> : <div></div>}\n\t\t\t<ol start={0} >{packets.map((p) => <li key={p.display()}>{p.display()}</li>)}</ol>\n\t\t</div>\n\t);\n}\n","// Copyright (c) 2020, The rav1e contributors. All rights reserved\n//\n// This source code is subject to the terms of the BSD 2 Clause License and\n// the Alliance for Open Media Patent License 1.0. If the BSD 2 Clause License\n// was not distributed with this source code in the LICENSE file, you can\n// obtain it at www.aomedia.org/license/software. If the Alliance for Open\n// Media Patent License 1.0 was not distributed with this source code in the\n// PATENTS file, you can obtain it at www.aomedia.org/license/patent.\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}